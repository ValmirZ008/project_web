from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import asyncio
import random
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, Message
from aiogram.client.default import DefaultBotProperties
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
from aiogram import F
from utils import get_main_menu_keyboard, get_difficulty_keyboard
from db import init_db, update_stats, get_stats, add_user
from deepseek_tester import deepseek_tester_main
from zadachi import *


API_TOKEN = "7287039940:AAEQj66VgJUwDxxkxJtDwhyhwOeIABOutwY"

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(
    parse_mode=ParseMode.HTML))
dp = Dispatcher()

next_test = ""
user_stats = {}


@dp.message(Command('question'))
async def ask_and_handle_question(msg: types.Message):
    question = "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2 + 2?"
    await msg.answer(question)

    @dp.message(lambda message: True)
    async def handle_answer(answer_msg: types.Message):
        correct_answer = "4"
        user_answer = answer_msg.text.strip()

        if user_answer == correct_answer:
            await answer_msg.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü!")
        else:
            await answer_msg.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")

        # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã
        dp.message.unregister(handle_answer)


async def neiro_question_math(
    call: CallbackQuery): await neiro_question(call, 'math')


async def neiro_question_inf(
    call: CallbackQuery): await neiro_question(call, 'inf')


async def neiro_question_physics(
    call: CallbackQuery): await neiro_question(call, 'physics')


async def neiro_question(call: CallbackQuery, lesson):
    global answer
    answer, question = deepseek_tester_main('math')
    # question = "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2 + 2?"
    await call.message.answer(question)

    @dp.message(lambda message: True)
    async def handle_answer(answer_msg: types.Message):
        correct_answer = answer
        user_answer = answer_msg.text.strip()
        if user_answer == correct_answer:
            await answer_msg.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü!")
        else:
            await answer_msg.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        if lesson == 'math':
            await random_math(call)
        elif lesson == 'inf':
            await random_informatics(call)
        else:
            await random_physics(call)
        # await call.message.answer(reply_markup=get_main_menu_keyboard())
        # dp.message.unregister(handle_answer)


async def random_math(call: CallbackQuery):
    tasks = [math_AB_task, math_probability_1_test,
             football_probability_task, math_percentage_task, math_speed_task, generate_cone_pyramid_task, math_probability_task, neiro_question_math]
    await random.choice(tasks)(call)


async def random_physics(call: CallbackQuery):
    tasks = [physics_energy_task, physics_mkT_1_task,
             impulse_calculation_task, physics_energy_task, physics_force_task, harmonic_oscillator_task, physics_ohms_task, neiro_question_inf]
    await random.choice(tasks)(call)


async def random_informatics(call: CallbackQuery):
    tasks = [informatics_sorting_task, memory_storage_task,
             audio_file_size_task, network_address_task, informatics_encoding_task, informatics_conversion_task, informatics_bits_task, neiro_question_physics]
    await random.choice(tasks)(call)


@dp.message(Command('start'))
async def start_handler(message: Message):
    username = message.from_user.full_name or message.from_user.username
    add_user(message.from_user.id, username)
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{username}</b>!\n\n"
        "–Ø ‚Äî –±–æ—Ç –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–Ω–∞–Ω–∏–π.\n\n"
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.\n\n"
        "üí° –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –º–µ–∂–¥—É –ª—ë–≥–∫–∏–º, —Å—Ä–µ–¥–Ω–∏–º –∏ —Å–ª–æ–∂–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º.\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.\n\n"
    )
    await message.answer(welcome_text, reply_markup=get_main_menu_keyboard())


@dp.message(F.text == "üéØ –í—ã–±—Ä–∞—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å")
async def choose_difficulty_handler(message: Message):
    await message.answer("üéØ –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=get_difficulty_keyboard())


task_reply_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîÅ –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞")],
        [KeyboardButton(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
)


@dp.message(F.text == "üü¢ –õ—ë–≥–∫–∞—è")
async def easy_difficulty_handler(message: Message):
    await message.answer("üéØ –í—ã –≤—ã–±—Ä–∞–ª–∏ <b>–õ—ë–≥–∫–∏–π</b> —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. –ù–∞—á–Ω–µ–º —Å –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤!")


@dp.message(F.text == "üü° –°—Ä–µ–¥–Ω—è—è")
async def medium_difficulty_handler(message: Message):
    await message.answer("üéØ –í—ã –≤—ã–±—Ä–∞–ª–∏ <b>–°—Ä–µ–¥–Ω–∏–π</b> —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. –í—Ä–µ–º—è –¥–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á!")


@dp.message(F.text == "üî¥ –°–ª–æ–∂–Ω–∞—è")
async def hard_difficulty_handler(message: Message):
    await message.answer("üéØ –í—ã –≤—ã–±—Ä–∞–ª–∏ <b>–°–ª–æ–∂–Ω—ã–π</b> —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. –ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —Å–∞–º—ã–º —Ç—Ä—É–¥–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º!")


@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: Message):
    await message.answer("üîô –í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())


@dp.message(F.text == "‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def handle_back_to_main_menu(message: Message):
    await back_to_main_menu(message)


@dp.message(F.text == "üîÅ –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞")
async def handle_new_task(message: Message):
    await message.answer("üîÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ –∫–∞–∫–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É.")


@dp.callback_query(F.data == "math_tasks")
async def math_tasks_handler(call: CallbackQuery):
    await random_math(call)


@dp.callback_query(F.data == "physics_tasks")
async def physics_tasks_handler(call: CallbackQuery):
    await random_physics(call)


@dp.callback_query(F.data == "informatics_tasks")
async def informatics_tasks_handler(call: CallbackQuery):
    await random_informatics(call)


@dp.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_handler(message: Message):
    correct, incorrect, total = get_stats(message.from_user.id)

    await message.answer(
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"<b>–ò–º—è:</b> {message.from_user.full_name}\n"
        f"<b>ID:</b> <code>{message.from_user.id}</code>\n\n"
        f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚úÖ –í–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: <b>{correct}</b>\n"
        f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: <b>{incorrect}</b>\n"
        f"üìö –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: <b>{total}</b>",
        parse_mode="HTML"
    )


@dp.message(F.text == "üìö –£—á–µ–±–Ω–∏–∫–∏")
async def textbooks_handler(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîó –°–∫–∞—á–∞—Ç—å —É—á–µ–±–Ω–∏–∫ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –ï–ì–≠",
                    url="https://drive.google.com/file/d/1wYreA8-fIBSDDhffaJcv5HXWnNclV-V8/view?usp=sharing"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîó –°–∫–∞—á–∞—Ç—å —É—á–µ–±–Ω–∏–∫ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –û–ì–≠",
                    url="https://drive.google.com/file/d/15CTNzSau5Z698vccah3q8f_3iYOxMpHR/view?usp=sharing"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîó –°–∫–∞—á–∞—Ç—å —É—á–µ–±–Ω–∏–∫ –ø–æ —Ñ–∏–∑–∏–∫–µ –ï–ì–≠",
                    url="https://drive.google.com/file/d/1hdPqXI9k_ScP5lYyVS5lMaJSWgxyoi9C/view?usp=sharing"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîó –°–∫–∞—á–∞—Ç—å —É—á–µ–±–Ω–∏–∫ –ø–æ —Ñ–∏–∑–∏–∫–µ –û–ì–≠",
                    url="https://drive.google.com/file/d/1P72i6Lx3YBFLL3rHDznjL3PZS8obM9I9/view?usp=sharing"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîó –°–∫–∞—á–∞—Ç—å —É—á–µ–±–Ω–∏–∫ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ –ï–ì–≠",
                    url="https://drive.google.com/file/d/1dZpJB7mXbHcMPdJmQ3AT9Q2TjyeZk7l3/view?usp=sharing"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîó –°–∫–∞—á–∞—Ç—å —É—á–µ–±–Ω–∏–∫ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ –û–ì–≠",
                    url="https://drive.google.com/file/d/1PwWKOL8lf9un9Yio6ZuT2GsVwwlzrexI/view?usp=sharing"
                )
            ]
        ]
    )

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–±–Ω–∏–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:",
        reply_markup=keyboard
    )


@dp.message(F.text == "üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")
async def training_handler(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞\n", callback_data="math_tasks"),
             InlineKeyboardButton(text="–§–∏–∑–∏–∫–∞\n", callback_data="physics_tasks")],
            [InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞\n",
                                  callback_data="informatics_tasks")]
        ]
    )
    await message.answer("üèãÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=keyboard)


@dp.callback_query(F.data.startswith("choose_difficulty_"))
async def difficulty_chosen(call: CallbackQuery):
    _, subject, difficulty = call.data.split("_")
    await call.message.answer(f"üéØ –í—ã –≤—ã–±—Ä–∞–ª–∏ <b>{difficulty.capitalize()}</b> —É—Ä–æ–≤–µ–Ω—å –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É <b>{subject.capitalize()}</b>.")
    await run_random_task(call, subject, difficulty)


@dp.callback_query(F.data.startswith('answer'))
async def check_answer(call: CallbackQuery):
    parts = call.data.split("_")
    answer = parts[1]
    correct_answer = parts[2]
    subject = parts[3] if len(parts) > 3 else None
    if answer == correct_answer:
        await call.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
        update_stats(call.from_user.id, subject=subject, is_correct=True)
    else:
        await call.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        update_stats(call.from_user.id, subject=subject, is_correct=False)
    await call.message.delete()
    next_msg = await call.message.answer("üß† –°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞:")
    await asyncio.sleep(0.5)
    await next_msg.delete()

    # –ü–æ–∫–∞ –∑–∞–∫–æ–º–µ–Ω—Ç–∏–ª, –¥–æ —ç—Ç–æ–≥–æ –Ω–µ —É–¥–∞–ª—è–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    # await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_task_reply_keyboard())
    if subject == "math":
        await random_math(call)
    elif subject == "physics":
        await random_physics(call)
    elif subject == "info":
        await random_informatics(call)


async def main():
    init_db()
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
